generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["b2b", "public"]
}

model Customer {
  id            String          @id @db.VarChar(26)
  firstName     String?
  lastName      String?
  email         String?
  imageUrl      String?
  password      String?
  CustomerOrder CustomerOrder[]

  @@schema("public")
}

model CustomerOrder {
  id          String   @id @db.VarChar(26)
  orderId     String   @db.VarChar(26)
  customerId  String   @db.VarChar(26)
  accepted    Boolean?
  initiatedBy Boolean?
  Customer    Customer @relation(fields: [customerId], references: [id])
  Order       Order    @relation(fields: [orderId], references: [id])

  @@schema("public")
}

model Equipment {
  id             String           @id @db.VarChar(26)
  hourRateId     String           @unique @db.VarChar(26)
  rentalObjectId String           @db.VarChar(26)
  name           String
  description    String?
  imageUrl       String?
  state          String?
  HourRates      HourRates        @relation(fields: [hourRateId], references: [id], onDelete: Cascade)
  RentalObject   RentalObject     @relation(fields: [rentalObjectId], references: [id])
  OrderEquipment OrderEquipment[]

  @@schema("public")
}

model HourRates {
  id           String        @id @db.VarChar(26)
  type         String?
  sunday       Float?
  monday       Float?
  tuesday      Float?
  wednesday    Float?
  thursday     Float?
  friday       Float?
  saturday     Float?
  updatedAt    DateTime?     @db.Timestamp(6)
  equipment    Equipment?
  personal     Personal?
  rentalObject RentalObject?

  @@schema("public")
}

model OrderEquipment {
  orderId     String    @db.VarChar(26)
  equipmentId String    @db.VarChar(26)
  Equipment   Equipment @relation(fields: [equipmentId], references: [id])
  Order       Order     @relation(fields: [orderId], references: [id])

  @@id([orderId, equipmentId])
  @@schema("public")
}

model OrderPersonal {
  orderId    String   @db.VarChar(26)
  personalId String   @db.VarChar(26)
  Order      Order    @relation(fields: [orderId], references: [id])
  Personal   Personal @relation(fields: [personalId], references: [id])

  @@id([orderId, personalId])
  @@schema("public")
}

model Order {
  id             String           @id @db.VarChar(26)
  start          DateTime         @db.Timestamp(6)
  end            DateTime         @db.Timestamp(6)
  rentalObjectId String           @db.VarChar(26)
  CustomerOrder  CustomerOrder[]
  OrderEquipment OrderEquipment[]
  OrderPersonal  OrderPersonal[]
  RentalObject   RentalObject     @relation(fields: [rentalObjectId], references: [id])

  @@schema("public")
}

model Organization {
  id             String         @id @db.VarChar(26)
  name           String?
  description    String?
  siteUrl        String?
  imageUrl       String?
  phone          String?
  address        String?
  updatedAt      DateTime?      @db.Timestamp(6)
  RentalObject   RentalObject[]
  WorkingHours   WorkingHours   @relation(fields: [workingHoursId], references: [id])
  workingHoursId String         @db.VarChar(26)

  @@schema("public")
}

model Personal {
  id             String          @id @db.VarChar(26)
  workingHoursId String          @db.VarChar(26)
  hourRateId     String          @unique @db.VarChar(26)
  rentalObjectId String          @db.VarChar(26)
  firstName      String?
  lastName       String?
  phone          String?
  description    String?
  imageUrl       String?
  hiredAt        DateTime?       @db.Timestamp(6)
  OrderPersonal  OrderPersonal[]
  HourRates      HourRates       @relation(fields: [hourRateId], references: [id], onDelete: Cascade)
  RentalObject   RentalObject    @relation(fields: [rentalObjectId], references: [id])
  WorkingHours   WorkingHours    @relation(fields: [workingHoursId], references: [id])

  @@schema("public")
}

model RentalObject {
  id             String       @id @db.VarChar(26)
  workingHoursId String       @db.VarChar(26)
  hourRateId     String       @unique @db.VarChar(26)
  organizationId String       @db.VarChar(26)
  name           String?
  description    String?
  imageUrl       String?
  phone          String?
  address        String?
  Equipment      Equipment[]
  Order          Order[]
  Personal       Personal[]
  HourRates      HourRates    @relation(fields: [hourRateId], references: [id], onDelete: Cascade)
  Organization   Organization @relation(fields: [organizationId], references: [id])
  WorkingHours   WorkingHours @relation(fields: [workingHoursId], references: [id])

  @@schema("public")
}

model WorkingHours {
  id           String         @id @db.VarChar(26)
  type         String?
  sunday       Json?
  monday       Json?
  tuesday      Json?
  wednesday    Json?
  thursday     Json?
  friday       Json?
  saturday     Json?
  updatedAt    DateTime?      @db.Timestamp(6)
  Personal     Personal[]
  RentalObject RentalObject[]
  Organization Organization[]

  @@schema("public")
}

enum RoleType {
  ADMIN
  OWNER
  MANAGER

  @@schema("b2b")
}

model Role {
  id          String       @id @db.VarChar(26)
  name        RoleType     @unique
  description String?
  permissions Permission[]
  account     Account?
  updatedAt   DateTime     @updatedAt

  @@schema("b2b")
}

model Permission {
  id         String   @id @db.VarChar(26)
  action     String
  subject    String
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   @db.VarChar(26)
  conditions Json?    @db.JsonB
  updatedAt  DateTime @updatedAt

  @@schema("b2b")
}

enum AccountStatus {
  PENDING
  ACTIVE
  BLOCKED
  DELETED

  @@schema("b2b")
}

model Account {
  id        String        @id @db.VarChar(26)
  email     String        @unique
  password  String?       @db.VarChar(255)
  status    AccountStatus @default(PENDING)
  owner     Owner?
  manager   Manager?
  role      Role?         @relation(fields: [roleId], references: [id])
  roleId    String?       @unique
  updatedAt DateTime      @updatedAt

  @@schema("b2b")
}

model Owner {
  id          String    @id @db.VarChar(26)
  firstName   String
  lastName    String
  phone       String
  siteUrl     String?
  imageUrl    String?
  description String?   @db.Text
  account     Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String?   @unique
  updatedAt   DateTime  @updatedAt
  managers    Manager[]

  @@schema("b2b")
}

model Manager {
  id          String   @id @db.VarChar(26)
  account     Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String?  @unique
  updatedAt   DateTime @updatedAt
  firstName   String
  lastName    String
  phone       String
  imageUrl    String?
  description String?  @db.Text
  owner       Owner?   @relation(fields: [ownerId], references: [id])
  ownerId     String   @db.VarChar(26)

  @@schema("b2b")
}
